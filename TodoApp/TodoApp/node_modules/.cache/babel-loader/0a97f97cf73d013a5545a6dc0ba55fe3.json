{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michal.DESKTOP-70H4SHU\\\\Desktop\\\\todo\\\\TodoApp\\\\TodoApp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  // constructor(props) {\n  //     super(props);\n  //     this.state = { forecasts: [], loading: true };\n  // }\n  // componentDidMount() {\n  //     this.populateWeatherData();\n  // }\n  // static renderForecastsTable(forecasts) {\n  //     return (\n  //         <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n  //             <thead>\n  //                 <tr>\n  //                     <th>Date</th>\n  //                     <th>Temp. (C)</th>\n  //                     <th>Temp. (F)</th>\n  //                     <th>Summary</th>\n  //                 </tr>\n  //             </thead>\n  //             <tbody>\n  //                 {forecasts.map(forecast =>\n  //                     <tr key={forecast.date}>\n  //                         <td>{forecast.date}</td>\n  //                         <td>{forecast.temperatureC}</td>\n  //                         <td>{forecast.temperatureF}</td>\n  //                         <td>{forecast.summary}</td>\n  //                     </tr>\n  //                 )}\n  //             </tbody>\n  //         </table>\n  //     );\n  // }\n  render() {\n    // let contents = this.state.loading\n    //     ? <p><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationreact\">https://aka.ms/jspsintegrationreact</a> for more details.</em></p>\n    //     : App.renderForecastsTable(this.state.forecasts);\n    // return (\n    //     <div>\n    //         <h1 id=\"tabelLabel\" >Weather forecast</h1>\n    //         <p>This component demonstrates fetching data from the server.</p>\n    //         {contents}\n    //     </div>\n    // );\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TodoApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Title\",\n        children: \"TodoApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('weatherforecast');\n    const data = await response.json();\n    this.setState({\n      forecasts: data,\n      loading: false\n    });\n  }\n\n}\nApp.displayName = App.name;","map":{"version":3,"sources":["C:/Users/Michal.DESKTOP-70H4SHU/Desktop/todo/TodoApp/TodoApp/src/App.js"],"names":["React","Component","App","render","populateWeatherData","response","fetch","data","json","setState","forecasts","loading","displayName","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAGvC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAE,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAEwB,QAAnBC,mBAAmB,GAAG;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,SAAKC,QAAL,CAAc;AAAEC,MAAAA,SAAS,EAAEH,IAAb;AAAmBI,MAAAA,OAAO,EAAE;AAA5B,KAAd;AACH;;AAlEsC;AAAtBT,G,CACVU,W,GAAcV,GAAG,CAACW,I","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = { forecasts: [], loading: true };\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     this.populateWeatherData();\r\n    // }\r\n\r\n    // static renderForecastsTable(forecasts) {\r\n    //     return (\r\n    //         <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n    //             <thead>\r\n    //                 <tr>\r\n    //                     <th>Date</th>\r\n    //                     <th>Temp. (C)</th>\r\n    //                     <th>Temp. (F)</th>\r\n    //                     <th>Summary</th>\r\n    //                 </tr>\r\n    //             </thead>\r\n    //             <tbody>\r\n    //                 {forecasts.map(forecast =>\r\n    //                     <tr key={forecast.date}>\r\n    //                         <td>{forecast.date}</td>\r\n    //                         <td>{forecast.temperatureC}</td>\r\n    //                         <td>{forecast.temperatureF}</td>\r\n    //                         <td>{forecast.summary}</td>\r\n    //                     </tr>\r\n    //                 )}\r\n    //             </tbody>\r\n    //         </table>\r\n    //     );\r\n    // }\r\n\r\n    render() {\r\n        // let contents = this.state.loading\r\n        //     ? <p><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationreact\">https://aka.ms/jspsintegrationreact</a> for more details.</em></p>\r\n        //     : App.renderForecastsTable(this.state.forecasts);\r\n\r\n        // return (\r\n        //     <div>\r\n        //         <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        //         <p>This component demonstrates fetching data from the server.</p>\r\n        //         {contents}\r\n        //     </div>\r\n        // );\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>TodoApp</h1>\r\n\r\n                <div className='Title'>TodoApp</div>\r\n                \r\n            </div>\r\n            \r\n        )\r\n\r\n\r\n    }\r\n\r\n    async populateWeatherData() {\r\n        const response = await fetch('weatherforecast');\r\n        const data = await response.json();\r\n        this.setState({ forecasts: data, loading: false });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}